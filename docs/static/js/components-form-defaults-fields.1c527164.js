(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{"./src/components/form/defaults/Fields.mdx":function(e,n,o){"use strict";o.r(n),o.d(n,"default",function(){return l});var t=o("./node_modules/docz/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),s=(o("./node_modules/react/index.js"),o("./node_modules/@mdx-js/react/dist/index.es.js")),r=o("./node_modules/docz/dist/index.esm.js"),a=o("./src/components/form/Field.js"),p=(o("./src/components/form/defaults/PasswordField.js"),{}),i="wrapper";function l(e){var n=e.components,o=Object(t.a)(e,["components"]);return Object(s.b)(i,Object.assign({},p,o,{components:n,mdxType:"MDXLayout"}),Object(s.b)("h1",{id:"fields"},"Fields"),Object(s.b)("h2",{id:"props"},"Props"),Object(s.b)(r.d,{of:a.a,mdxType:"Props"}),Object(s.b)("h2",{id:"usage"},"Usage"),Object(s.b)("h3",{id:"changing-the-field-within-your-entire-app"},"Changing the field within your entire app"),Object(s.b)("p",null,"The Password Field can be customized by creating a component in your project and then passing it to the KineticLib Provider in the root of your app."),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-javascript"}),"/**\n *  myproject/src/components/fields/PasswordField.js\n */\nconst hasErrors = props => props.touched && props.errors.size > 0;\n\nexport const PasswordField = props => {\n  return props.visible ? (\n    <div className=\"form-group\">\n      {props.label && (\n        <label className=\"col-form-label\" htmlFor={props.id}>\n          {props.label}\n          {props.required && <abbr title=\"required\">*</abbr>}\n        </label>\n      )}\n\n      <input\n        className={`form-control${hasErrors(props) ? ' is-invalid' : ''}`}\n        type=\"password\"\n        id={props.id}\n        name={props.name}\n        value={props.value}\n        placeholder={props.placeholder}\n        onBlur={props.onBlur}\n        onChange={props.onChange}\n        onFocus={props.onFocus}\n        disabled={!props.enabled}\n      />\n\n      {hasErrors(props) &&\n        props.errors.map(error => (\n          <span className=\"help-block text-danger\" key={error}>\n            {error}\n          </span>\n        ))}\n    </div>\n  ) : null;\n};\n\n/**\n *  myproject/src/App.js\n */\nimport { PasswordField } from './components/common/forms/PasswordField';\nimport { KineticLib } from '@kineticdata/react';\n\nexport const App = props => (\n  <KineticLib\n    components={{\n      fields: {\n        PasswordField,\n      },\n    }}\n  >\n    {'...yourAppHere'}\n  </KineticLib>\n);\n")),Object(s.b)("h3",{id:"changing-the-field-for-a-single-form"},"Changing the field for a single form"),Object(s.b)("p",null,"The Password Field can be customized by creating a component in your project and then passing it to the KineticLib Provider in the root of your app."),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-javascript"}),"/**\n *  myproject/src/components/MyForm.js\n */\nconst hasErrors = props => props.touched && props.errors.size > 0;\n\nconst PasswordField = props => {\n  return props.visible ? (\n    <div className=\"form-group\">\n      {props.label && (\n        <label className=\"col-form-label\" htmlFor={props.id}>\n          {props.label}\n          {props.required && <abbr title=\"required\">*</abbr>}\n        </label>\n      )}\n\n      <input\n        className={`form-control${hasErrors(props) ? ' is-invalid' : ''}`}\n        type=\"password\"\n        id={props.id}\n        name={props.name}\n        value={props.value}\n        placeholder={props.placeholder}\n        onBlur={props.onBlur}\n        onChange={props.onChange}\n        onFocus={props.onFocus}\n        disabled={!props.enabled}\n      />\n\n      {hasErrors(props) &&\n        props.errors.map(error => (\n          <span className=\"help-block text-danger\" key={error}>\n            {error}\n          </span>\n        ))}\n    </div>\n  ) : null;\n};\n\nexport const MyForm = () => (\n  <Form\n    fields={[\n      {\n        name: 'passwordField',\n        label: 'My Password Field',\n        type: 'password',\n      },\n    ]}\n    alterFields={{\n      passwordField: {\n        component: PasswordField,\n      },\n    }}\n  />\n);\n")),Object(s.b)("h2",{id:"default-fields"},"Default Fields"),Object(s.b)("h3",{id:"attributes"},"Attributes"),Object(s.b)("p",null,"The Default Attributes Field rendered when a field type is ",Object(s.b)("inlineCode",{parentName:"p"},"attributes")),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-javascript"}),"import React, { Component, Fragment } from 'react';\nimport { List, Map, Repeat } from 'immutable';\n\nexport class AttributesField extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { added: List(), adding: '' };\n  }\n\n  // returns the number of attribute values that were previously set\n  countPrevious = name =>\n    this.props.value.get(name).size - this.countAdded(name);\n\n  // returns the number of attribute values that have been added\n  countAdded = name => this.state.added.filter(n => n === name).size;\n\n  onRemove = (name, index) => () => {\n    const addedIndex = index - this.countPrevious(name);\n    if (addedIndex >= 0) {\n      this.setState(state => ({\n        added: filterWithOccurrences(\n          state.added,\n          (n, i) => n !== name || i !== addedIndex,\n        ),\n      }));\n    }\n    this.props.onChange(this.props.value.deleteIn([name, index]));\n  };\n\n  onInputChange = (name, index) => event => {\n    const value = event.target.value;\n    if (!this.props.value.hasIn([name, index])) {\n      this.setState(state => ({\n        added: state.added.push(state.adding),\n        adding: '',\n      }));\n    }\n    this.props.onChange(\n      this.props.value.update(name, List(), values => values.set(index, value)),\n    );\n  };\n\n  onSelectChange = event => {\n    this.setState({ adding: event.target.value });\n  };\n\n  render() {\n    const attributes = mapWithOccurrences(\n      this.props.value\n        .keySeq()\n        .sort()\n        .flatMap(name => Repeat(name, this.countPrevious(name)))\n        .concat(this.state.added.push(this.state.adding)),\n      (name, index) => ({\n        name,\n        index,\n        value: this.props.value.getIn([name, index], ''),\n      }),\n    );\n    return (\n      this.props.visible && (\n        <Fragment>\n          <h5>{this.props.label}</h5>\n          <table>\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Value</th>\n                <th />\n              </tr>\n            </thead>\n            <tbody>\n              {attributes.size === 1 && this.props.placeholder && (\n                <tr>\n                  <td colSpan={3}>\n                    <em>{this.props.placeholder}</em>\n                  </td>\n                </tr>\n              )}\n              {attributes.map(({ name, value, index }, i) => (\n                <tr key={i}>\n                  <td>\n                    {i < attributes.size - 1 ? (\n                      name\n                    ) : (\n                      <select onChange={this.onSelectChange} value={name}>\n                        <option hidden />\n                        {availableAttributes(\n                          this.props.options,\n                          this.props.value,\n                        ).map(option => (\n                          <option key={option} value={option}>\n                            {option}\n                          </option>\n                        ))}\n                      </select>\n                    )}\n                  </td>\n                  <td>\n                    <input\n                      type=\"text\"\n                      value={value}\n                      onFocus={this.props.onFocus}\n                      onBlur={this.props.onBlur}\n                      onChange={this.onInputChange(name, index)}\n                    />\n                  </td>\n                  <td>\n                    {i < attributes.size - 1 && (\n                      <button\n                        type=\"button\"\n                        onFocus={this.props.onFocus}\n                        onBlur={this.props.onBlur}\n                        onClick={this.onRemove(name, index)}\n                      >\n                        &times;\n                      </button>\n                    )}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </Fragment>\n      )\n    );\n  }\n}\n\n// Helper function that maps for a List but instead of providing the index in\n// the overall list, it gives the lambda the count of the occurrences of current\n// value that have already occurred in the list.\n// For example: ['red', 'green', ''red',]\n// Would call: ['red,' 0], ['green', 0], ['red', 1], ['blue', 0]\nconst mapWithOccurrences = (list, mapper) =>\n  list.reduce(\n    ([result, counts], current) => [\n      result.push(mapper(current, counts.get(current, 0))),\n      counts.update(current, 0, count => count + 1),\n    ],\n    [List(), Map()],\n  )[0];\n\n// Same idea as mapWithOccurrences above.\nconst filterWithOccurrences = (list, pred) =>\n  list.reduce(\n    ([result, counts], current) => [\n      pred(current, counts.get(current, 0)) ? result.push(current) : result,\n      counts.update(current, 0, count => count + 1),\n    ],\n    [List(), Map()],\n  )[0];\n\nconst availableAttributes = (options, value) =>\n  options\n    .filter(\n      option =>\n        option.get('allowsMultiple') ||\n        value.get(option.get('name'), List()).isEmpty(),\n    )\n    .map(option => option.get('name'));\n")),Object(s.b)("h3",{id:"checkbox"},"Checkbox"),Object(s.b)("p",null,"The Default Checkbox Field rendered when a field type is ",Object(s.b)("inlineCode",{parentName:"p"},"checkbox")),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-javascript"}),'export const CheckboxField = props =>\n  props.visible && (\n    <div className="field">\n      <input\n        type="checkbox"\n        id={props.id || props.name}\n        name={props.name}\n        checked={props.value || false}\n        onBlur={props.onBlur}\n        onChange={props.onChange}\n        onFocus={props.onFocus}\n      />\n      <label htmlFor={props.id || props.name}>{props.label}</label>\n    </div>\n  );\n')),Object(s.b)("h3",{id:"password"},"Password"),Object(s.b)("p",null,"The Default Password Field rendered when a field type is ",Object(s.b)("inlineCode",{parentName:"p"},"password")),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-javascript"}),'export const PasswordField = props =>\n  props.visible && (\n    <div className="field">\n      <label htmlFor={props.id || props.name}>{props.label}</label>\n      <input\n        type="password"\n        id={props.id || props.name}\n        name={props.name}\n        value={props.value || \'\'}\n        onBlur={props.onBlur}\n        onChange={props.onChange}\n        onFocus={props.onFocus}\n      />\n    </div>\n  );\n')),Object(s.b)("h3",{id:"radio"},"Radio"),Object(s.b)("p",null,"The Default Radio Field rendered when a field type is ",Object(s.b)("inlineCode",{parentName:"p"},"radio")),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-javascript"}),'export const RadioField = props =>\n  props.visible && (\n    <div className="field">\n      <legend>{props.label}</legend>\n      {props.options.map(option => (\n        <label key={option.value}>\n          <input\n            name={props.name}\n            type="radio"\n            value={option.value}\n            checked={props.value === option.value}\n            onChange={props.onChange}\n            onBlur={props.onBlur}\n            onFocus={props.onFocus}\n          />\n          {option.label}\n        </label>\n      ))}\n    </div>\n  );\n')),Object(s.b)("h3",{id:"select"},"Select"),Object(s.b)("p",null,"The Default Select Field rendered when a field type is ",Object(s.b)("inlineCode",{parentName:"p"},"select")),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-javascript"}),"export const SelectField = props =>\n  props.visible && (\n    <div className=\"field\">\n      <label htmlFor={props.id || props.name}>{props.label}</label>\n      <select\n        id={props.id || props.name}\n        name={props.name}\n        value={props.value || ''}\n        onBlur={props.onBlur}\n        onChange={props.onChange}\n        onFocus={props.onFocus}\n      >\n        <option />\n        {props.options.map((option, i) => (\n          <option key={i} value={option.value}>\n            {option.label}\n          </option>\n        ))}\n      </select>\n    </div>\n  );\n")),Object(s.b)("h3",{id:"team"},"Team"),Object(s.b)("p",null,"The Default Team Field rendered when a field type is ",Object(s.b)("inlineCode",{parentName:"p"},"team")),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-javascript"}),"export const SelectField = props =>\n  props.visible && (\n    <div className=\"field\">\n      <label htmlFor={props.id || props.name}>{props.label}</label>\n      <select\n        id={props.id || props.name}\n        name={props.name}\n        value={props.value || ''}\n        onBlur={props.onBlur}\n        onChange={props.onChange}\n        onFocus={props.onFocus}\n      >\n        <option />\n        {props.options.map((option, i) => (\n          <option key={i} value={option.value}>\n            {option.label}\n          </option>\n        ))}\n      </select>\n    </div>\n  );\n")))}l&&l===Object(l)&&Object.isExtensible(l)&&Object.defineProperty(l,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"src/components/form/defaults/Fields.mdx"}}),l.isMDXComponent=!0}}]);
//# sourceMappingURL=components-form-defaults-fields.fe836f13f3de37b2bf1e.js.map