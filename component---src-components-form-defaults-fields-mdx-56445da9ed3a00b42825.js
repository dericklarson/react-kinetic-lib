(window.webpackJsonp=window.webpackJsonp||[]).push([[155],{222:function(e,n,r){"use strict";r.r(n),r.d(n,"_frontmatter",function(){return t}),r.d(n,"default",function(){return d});var o=r(100),s=r(252),p=(r(3),r(0),r(77)),a=r(254),t={};void 0!==t&&t&&t===Object(t)&&Object.isExtensible(t)&&Object.defineProperty(t,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/components/form/defaults/Fields.mdx"}});var l={_frontmatter:t},i=a.a;function d(e){var n=e.components,r=Object(s.a)(e,["components"]);return Object(p.b)(i,Object(o.a)({},l,r,{components:n,mdxType:"MDXLayout"}),Object(p.b)("h1",{id:"fields"},"Fields"),Object(p.b)("h2",{id:"field-props"},"Field Props"),Object(p.b)("h2",{id:"usage"},"Usage"),Object(p.b)("h3",{id:"changing-the-field-within-your-entire-app"},"Changing the field within your entire app"),Object(p.b)("p",null,"The Password Field can be customized by creating a component in your project and then passing it to the KineticLib Provider in the root of your app."),Object(p.b)("pre",null,Object(p.b)("code",Object(o.a)({parentName:"pre"},{className:"language-javascript"}),"/**\n *  myproject/src/components/fields/PasswordField.js\n */\nconst hasErrors = props => props.touched && props.errors.size > 0;\n\nexport const PasswordField = props => {\n  return props.visible ? (\n    <div className=\"form-group\">\n      {props.label && (\n        <label className=\"col-form-label\" htmlFor={props.id}>\n          {props.label}\n          {props.required && <abbr title=\"required\">*</abbr>}\n        </label>\n      )}\n\n      <input\n        className={`form-control${hasErrors(props) ? ' is-invalid' : ''}`}\n        type=\"password\"\n        id={props.id}\n        name={props.name}\n        value={props.value}\n        placeholder={props.placeholder}\n        onBlur={props.onBlur}\n        onChange={props.onChange}\n        onFocus={props.onFocus}\n        disabled={!props.enabled}\n      />\n\n      {hasErrors(props) &&\n        props.errors.map(error => (\n          <span className=\"help-block text-danger\" key={error}>\n            {error}\n          </span>\n        ))}\n    </div>\n  ) : null;\n};\n\n/**\n *  myproject/src/App.js\n */\nimport { PasswordField } from './components/common/forms/PasswordField';\nimport { KineticLib } from '@kineticdata/react';\n\nexport const App = props => (\n  <KineticLib\n    components={{\n      fields: {\n        PasswordField,\n      },\n    }}\n  >\n    {'...yourAppHere'}\n  </KineticLib>\n);\n")),Object(p.b)("h3",{id:"changing-the-field-for-a-single-form"},"Changing the field for a single form"),Object(p.b)("p",null,"The Password Field can be customized by creating a component in your project and then passing it to the KineticLib Provider in the root of your app."),Object(p.b)("pre",null,Object(p.b)("code",Object(o.a)({parentName:"pre"},{className:"language-javascript"}),"/**\n *  myproject/src/components/MyForm.js\n */\nconst hasErrors = props => props.touched && props.errors.size > 0;\n\nconst PasswordField = props => {\n  return props.visible ? (\n    <div className=\"form-group\">\n      {props.label && (\n        <label className=\"col-form-label\" htmlFor={props.id}>\n          {props.label}\n          {props.required && <abbr title=\"required\">*</abbr>}\n        </label>\n      )}\n\n      <input\n        className={`form-control${hasErrors(props) ? ' is-invalid' : ''}`}\n        type=\"password\"\n        id={props.id}\n        name={props.name}\n        value={props.value}\n        placeholder={props.placeholder}\n        onBlur={props.onBlur}\n        onChange={props.onChange}\n        onFocus={props.onFocus}\n        disabled={!props.enabled}\n      />\n\n      {hasErrors(props) &&\n        props.errors.map(error => (\n          <span className=\"help-block text-danger\" key={error}>\n            {error}\n          </span>\n        ))}\n    </div>\n  ) : null;\n};\n\nexport const MyForm = () => (\n  <Form\n    fields={[\n      {\n        name: 'passwordField',\n        label: 'My Password Field',\n        type: 'password',\n      },\n    ]}\n    alterFields={{\n      passwordField: {\n        component: PasswordField,\n      },\n    }}\n  />\n);\n")),Object(p.b)("h2",{id:"default-fields"},"Default Fields"),Object(p.b)("h3",{id:"password-field"},"Password Field"),Object(p.b)("p",null,"The Default Password Field rendered when a field type is ",Object(p.b)("inlineCode",{parentName:"p"},"password")),Object(p.b)("pre",null,Object(p.b)("code",Object(o.a)({parentName:"pre"},{className:"language-javascript"}),'export const PasswordField = props =>\n  props.visible && (\n    <div className="field">\n      <label htmlFor={props.id || props.name}>{props.label}</label>\n      <input\n        type="password"\n        id={props.id || props.name}\n        name={props.name}\n        value={props.value || \'\'}\n        onBlur={props.onBlur}\n        onChange={props.onChange}\n        onFocus={props.onFocus}\n      />\n    </div>\n  );\n')))}d&&d===Object(d)&&Object.isExtensible(d)&&Object.defineProperty(d,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/components/form/defaults/Fields.mdx"}}),d.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-components-form-defaults-fields-mdx-56445da9ed3a00b42825.js.map