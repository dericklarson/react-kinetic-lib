{"version":3,"sources":["/Users/jamesdavies/dev/react/react-kinetic-lib/src/components/form/Form.mdx"],"names":["layoutProps","MDXLayout","MDXContent","components","props","mdxType","parentName","of","Form","__position","__code","__scope","this","Playground","Props","Field","typeToComponent","__codesandbox","fields","name","label","type","onSubmit","alert","bindings","initialized","form","Object","entries","filter","key","map","value","toString","isMDXComponent"],"mappings":"+nBAaMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACH,EAAD,iBAAeD,EAAiBI,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,iBAAQ,CACN,GAAM,QADR,QAGA,4BAAW,0BAAYC,WAAW,KAAvB,YAAX,8LAGA,iBAAQ,CACN,GAAM,SADR,SAGA,YAAC,IAAD,CAAOC,GAAIC,IAAMH,QAAQ,UACzB,iBAAQ,CACN,GAAM,SADR,SAGA,iBAAQ,CACN,GAAM,kDADR,8BAEkC,0BAAYC,WAAW,MAAvB,QAFlC,oBAGA,YAAC,IAAD,CAAYG,WAAY,EAAGC,OAAQ,oRAA6RC,QAAS,CACvUP,MAAOQ,KAAOA,KAAKR,MAAQA,EAC3BS,eACAC,UACAN,SACAO,UACAC,qBACCC,cAAa,u4rBAA04rBZ,QAAQ,cACp6rB,YAAC,IAAD,CAAMa,OAAQ,CAAC,CACTC,KAAM,SACNC,MAAO,UACPC,KAAM,SACJC,SAAU,SAAAlB,GAAK,OAAImB,MAAM,eAAelB,QAAQ,QACrD,YAIS,EAHJmB,SAGK,IAFLC,EAEI,EAFJA,YACAC,EACI,EADJA,KAEA,OAAOD,EAAc,uBAAMC,GAAc,mCAI/C,iBAAQ,CACN,GAAM,iBADR,iBAGA,mIACY,0BAAYpB,WAAW,KAAvB,QADZ,qEACkI,+BAAGA,WAAW,KAAQ,CACpJ,KAAQ,kCADsH,cADlI,8BAIsB,0BAAYA,WAAW,KAAvB,aAJtB,wCAIoH,0BAAYA,WAAW,KAAvB,QAJpH,YAKF,+BAAGA,WAAW,KAAQ,CAChB,KAAQ,8CADd,wDAGE,mIACF,+BAAGA,WAAW,KAAQ,CAChB,KAAQ,uDADd,iEAGE,qHACA,sBACE,kBAAIA,WAAW,MAAf,gGACA,kBAAIA,WAAW,MAAf,oFACA,kBAAIA,WAAW,MAAf,oEAAyF,+BAAGA,WAAW,MAAS,CAC5G,KAAQ,oBAD6E,iBAAzF,6BAIF,iBAAQ,CACN,GAAM,eADR,eAGA,mHACA,YAAC,IAAD,CAAOC,GAAIQ,IAAOV,QAAQ,UAC1B,iBAAQ,CACN,GAAM,yBADR,yBAGA,+DAA8C,+BAAGC,WAAW,KAAQ,CAChE,KAAQ,8CADkC,YAA9C,mGAIA,yBACF,yBACE,sBACE,oCACA,0CAGJ,yBACGqB,OAAOC,QAAQZ,KAAiBa,OAAO,mCAAEC,EAAF,gBAA0B,eAARA,IAAsBC,IAAI,mCAAED,EAAF,KAAOE,EAAP,YAAkB,kBAAIF,IAAKA,GACzG,sBAAKA,GACL,sBAAKE,EAAMC,iBAIjB,iBAAQ,CACN,GAAM,YADR,YAGA,iBAAQ,CACN,GAAM,4CADR,4CAGA,6KACA,uBAAK,kCAAM3B,WAAW,OAAU,CAC5B,UAAa,wBADZ,62CA0DL,iBAAQ,CACN,GAAM,qDADR,qDAGA,6KACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,syC,kLA6DTJ,EAAWgC,gBAAiB","file":"static/js/components-form-form.a0d5a974.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { Form } from './Form';\nimport { Field, typeToComponent } from './Field';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"form\"\n    }}>{`Form`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`<Form />`}</inlineCode>{` component provides a generic way of rendering html forms. Below is\na definition of all of the properties that can be passed to the form\nand examples of wiring the form up in a project`}</p>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={Form} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <h3 {...{\n      \"id\": \"simple-implementation-of-a-form-with-one-field\"\n    }}>{`Simple implementation of a `}<inlineCode parentName=\"h3\">{`Form`}</inlineCode>{` with one field.`}</h3>\n    <Playground __position={1} __code={'<Form\\n  fields={[\\n    {\\n      name: \\'Field1\\',\\n      label: \\'Field 1\\',\\n      type: \\'text\\',\\n    },\\n  ]}\\n  onSubmit={props => alert(\\'It Worked!\\')}\\n>\\n  {({ bindings, initialized, form }) => {\\n    return initialized ? <div>{form}</div> : <p>Loading</p>\\n  }}\\n</Form>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Form,\n      Field,\n      typeToComponent\n    }} __codesandbox={``} mdxType=\"Playground\">\n  <Form fields={[{\n        name: 'Field1',\n        label: 'Field 1',\n        type: 'text'\n      }]} onSubmit={props => alert('It Worked!')} mdxType=\"Form\">\n    {({\n          bindings,\n          initialized,\n          form\n        }) => {\n          return initialized ? <div>{form}</div> : <p>Loading</p>;\n        }}\n  </Form>\n    </Playground>\n    <h2 {...{\n      \"id\": \"customization\"\n    }}>{`Customization`}</h2>\n    <p>{`All fields defined on a form can have custom renderers. For instance, if the implementation\ncalls for all `}<inlineCode parentName=\"p\">{`text`}</inlineCode>{` fields to be implemented with a wrapper, or a UI framework (like `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactstrap.github.io/\"\n      }}>{`reactstrap`}</a>{`)\nyou can create a custom `}<inlineCode parentName=\"p\">{`TextField`}</inlineCode>{` component for all forms that have a `}<inlineCode parentName=\"p\">{`text`}</inlineCode>{` field.\n`}<a parentName=\"p\" {...{\n        \"href\": \"#changing-a-field-type-component-globally\"\n      }}>{`Example of changing a field type component globally`}</a></p>\n    <p>{`You can also change a field type for a specific field on a form which overrides the global configuration.\n`}<a parentName=\"p\" {...{\n        \"href\": \"#changing-a-field-type-component-for-a-single-form\"\n      }}>{`Example of changing a field type component for a single form`}</a></p>\n    <p>{`The library chooses which component to render for a given field in the following precidence:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Local Config: If the forms field configuration provides a component to be used for rendering`}</li>\n      <li parentName=\"ol\">{`Global Config: If the project provides a global component for a given field type`}</li>\n      <li parentName=\"ol\">{`Default Config: If no local or global component are matched, the `}<a parentName=\"li\" {...{\n          \"href\": \"#default-fields\"\n        }}>{`default field`}</a>{` component will be used.`}</li>\n    </ol>\n    <h3 {...{\n      \"id\": \"field-props\"\n    }}>{`Field Props`}</h3>\n    <p>{`The following properties are available to the component responsible for rendering a field.`}</p>\n    <Props of={Field} mdxType=\"Props\" />\n    <h3 {...{\n      \"id\": \"supported-field-types\"\n    }}>{`Supported Field Types`}</h3>\n    <p>{`When configuring field type components `}<a parentName=\"p\" {...{\n        \"href\": \"#changing-a-field-type-component-globally\"\n      }}>{`Globally`}</a>{`, the component needs to be named\nas follows for the field type component you are configuring:`}</p>\n    <table>\n  <thead>\n    <tr>\n      <th>Field Type</th>\n      <th>Component Name</th>\n    </tr>\n  </thead>\n  <tbody>\n    {Object.entries(typeToComponent).filter(([key, value]) => key !== '__filemeta').map(([key, value]) => <tr key={key}>\n          <td>{key}</td>\n          <td>{value.toString()}</td>\n        </tr>)}\n  </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h3>\n    <h4 {...{\n      \"id\": \"changing-a-field-type-component-globally\"\n    }}>{`Changing a field type component globally`}</h4>\n    <p>{`The Password Field can be customized by creating a component in your project and then passing it to the KineticLib Provider in the root of your app.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`/**\n *  myproject/src/components/fields/PasswordField.js\n */\nconst hasErrors = props => props.touched && props.errors.size > 0;\n\nexport const PasswordField = props => {\n  return props.visible ? (\n    <div className=\"form-group\">\n      {props.label && (\n        <label className=\"col-form-label\" htmlFor={props.id}>\n          {props.label}\n          {props.required && <abbr title=\"required\">*</abbr>}\n        </label>\n      )}\n\n      <input\n        className={\\`form-control\\${hasErrors(props) ? ' is-invalid' : ''}\\`}\n        type=\"password\"\n        id={props.id}\n        name={props.name}\n        value={props.value}\n        placeholder={props.placeholder}\n        onBlur={props.onBlur}\n        onChange={props.onChange}\n        onFocus={props.onFocus}\n        disabled={!props.enabled}\n      />\n\n      {hasErrors(props) &&\n        props.errors.map(error => (\n          <span className=\"help-block text-danger\" key={error}>\n            {error}\n          </span>\n        ))}\n    </div>\n  ) : null;\n};\n\n/**\n *  myproject/src/App.js\n */\nimport { PasswordField } from './components/common/forms/PasswordField';\nimport { KineticLib } from '@kineticdata/react';\n\nexport const App = props => (\n  <KineticLib\n    components={{\n      fields: {\n        PasswordField,\n      },\n    }}\n  >\n    {'...yourAppHere'}\n  </KineticLib>\n);\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"changing-a-field-type-component-for-a-single-form\"\n    }}>{`Changing a field type component for a single form`}</h4>\n    <p>{`The Password Field can be customized by creating a component in your project and then passing it to the KineticLib Provider in the root of your app.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`/**\n *  myproject/src/components/MyForm.js\n */\nconst hasErrors = props => props.touched && props.errors.size > 0;\n\nconst PasswordField = props => {\n  return props.visible ? (\n    <div className=\"form-group\">\n      {props.label && (\n        <label className=\"col-form-label\" htmlFor={props.id}>\n          {props.label}\n          {props.required && <abbr title=\"required\">*</abbr>}\n        </label>\n      )}\n\n      <input\n        className={\\`form-control\\${hasErrors(props) ? ' is-invalid' : ''}\\`}\n        type=\"password\"\n        id={props.id}\n        name={props.name}\n        value={props.value}\n        placeholder={props.placeholder}\n        onBlur={props.onBlur}\n        onChange={props.onChange}\n        onFocus={props.onFocus}\n        disabled={!props.enabled}\n      />\n\n      {hasErrors(props) &&\n        props.errors.map(error => (\n          <span className=\"help-block text-danger\" key={error}>\n            {error}\n          </span>\n        ))}\n    </div>\n  ) : null;\n};\n\nexport const MyForm = () => (\n  <Form\n    fields={[\n      {\n        name: 'passwordField',\n        label: 'My Password Field',\n        type: 'password',\n      },\n    ]}\n    alterFields={{\n      passwordField: {\n        component: PasswordField,\n      },\n    }}\n  />\n);\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}